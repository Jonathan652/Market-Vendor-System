/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bse_oop2_2025;
import java.sql.*;
import javax.swing.JOptionPane;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

/**
 *
 * @author jonah
 */
public class StallAssignment extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(StallAssignment.class.getName());

    /**
     * Creates new form StallAssignment
     */
    public StallAssignment() {
        initComponents();
        loadVendors();
    loadAvailableStalls();

        
    }
    public void loadVendors() {
    try {
        Connection conn = getConnection();
        String sql = "SELECT vendor_id, CONCAT(first_name, ' ', last_name) AS vendor_name FROM vendors WHERE status = 'Active'";
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sql);
        
        
        cmbvendor.removeAllItems(); 
        cmbvendor.addItem("Select Vendor");
        
        while (rs.next()) {
            String item = rs.getInt("vendor_id") + " - " + rs.getString("vendor_name");
            cmbvendor.addItem(item);
        }
        
        conn.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error loading vendors: " + e.getMessage());
    }
}
    public void loadAvailableStalls() {
    try {
        Connection conn = getConnection();
        String sql = "SELECT stall_id, stall_number, section, monthly_rent FROM stalls WHERE status = 'Available' ORDER BY stall_number";
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sql);
        
        
        java.util.Vector<String> stallList = new java.util.Vector<>();
        
        while (rs.next()) {
            String stallInfo = rs.getString("stall_number") + " - " + 
                              rs.getString("section") + " (UGX " + 
                              rs.getDouble("monthly_rent") + ")";
            stallList.add(stallInfo);
        }
        
       
        lstavailable.setListData(stallList); 
        
        conn.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error loading available stalls: " + e.getMessage());
    }
}
    public String getSelectedDate() {
    
    
    
    LocalDate selectedDate = LocalDate.now(); 
    
    
    return selectedDate.toString(); 
}
    public Connection getConnection() {
    try {
        String url = "jdbc:mysql://localhost:3306/market_vendor_db";
        String username = "root";
        String password = "Jonah@1170";
        
        Connection conn = DriverManager.getConnection(url, username, password);
        return conn;
    } catch (Exception e) {
        System.out.println("Database connection error: " + e.getMessage());
        return null;
    }
}
    public void setTodayAsDefault() {
    
    LocalDate today = LocalDate.now();
    
    
    System.out.println("Default date set to: " + today.toString());
}
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbvendor = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstavailable = new javax.swing.JList<>();
        lbassignmentdate = new javax.swing.JLabel();
        btnassign = new javax.swing.JButton();
        btncancel = new javax.swing.JButton();
        clndassignmentdate = new com.toedter.calendar.JCalendar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Vendor");

        cmbvendor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Available");

        lstavailable.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lstavailable);

        lbassignmentdate.setText("Assignment Date");

        btnassign.setText("Assign");
        btnassign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnassignActionPerformed(evt);
            }
        });

        btncancel.setText("Cancel");
        btncancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(lbassignmentdate))
                .addGap(116, 116, 116)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbvendor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(clndassignmentdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(225, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(btnassign)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btncancel)
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cmbvendor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                        .addComponent(lbassignmentdate)
                        .addGap(100, 100, 100))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clndassignmentdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnassign)
                    .addComponent(btncancel))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnassignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnassignActionPerformed
        // TODO add your handling code here:
    
    if (cmbvendor.getSelectedIndex() == 0) {
        JOptionPane.showMessageDialog(this, "Please select a vendor!");
        return;
    }
    
    
    String selectedStall = lstavailable.getSelectedValue(); 
    if (selectedStall == null) {
        JOptionPane.showMessageDialog(this, "Please select an available stall!");
        return;
    }
    
    
    String vendorInfo = cmbvendor.getSelectedItem().toString();
    int vendorId = Integer.parseInt(vendorInfo.split(" - ")[0]);
    
   
    String stallNumber = selectedStall.split(" - ")[0];
    
    
    String assignmentDate = getSelectedDate();
    
    try {
        Connection conn = getConnection();
        
        
        String getStallIdSql = "SELECT stall_id FROM stalls WHERE stall_number = ?";
        PreparedStatement getStallPst = conn.prepareStatement(getStallIdSql);
        getStallPst.setString(1, stallNumber);
        ResultSet stallRs = getStallPst.executeQuery();
        
        if (stallRs.next()) {
            int stallId = stallRs.getInt("stall_id");
            
            
           String assignSql = "INSERT INTO stall_assignments (vendor_id, stall_id, assignment_date, status) VALUES (?, ?, ?, 'Active')";
            PreparedStatement assignPst = conn.prepareStatement(assignSql);
            assignPst.setInt(1, vendorId);
            assignPst.setInt(2, stallId);
            assignPst.setDate(3, java.sql.Date.valueOf(assignmentDate));
            
            int result = assignPst.executeUpdate();
            
             if (result > 0) {
                // Update stall status to occupied
                String updateStallSql = "UPDATE stalls SET status = 'Occupied' WHERE stall_id = ?";
                PreparedStatement updatePst = conn.prepareStatement(updateStallSql);
                updatePst.setInt(1, stallId);
                updatePst.executeUpdate();
                
                JOptionPane.showMessageDialog(this, "Stall " + stallNumber + " assigned successfully to vendor!");
                
                loadAvailableStalls(); 
                
                cmbvendor.setSelectedIndex(0); // Reset vendor selection
                lstavailable.clearSelection();
                
                } else {
                JOptionPane.showMessageDialog(this, "Failed to assign stall. Please try again.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selected stall not found in database!");
        }
        
        conn.close();
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error assigning stall: " + ex.getMessage());
        ex.printStackTrace(); // This will help debug any other issues
    
}
            
            
            
           

    }//GEN-LAST:event_btnassignActionPerformed

    private void btncancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancelActionPerformed
        // TODO add your handling code here:
    this.setVisible(false);
    new StallManagement().setVisible(true); 

    }//GEN-LAST:event_btncancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new StallAssignment().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnassign;
    private javax.swing.JButton btncancel;
    private com.toedter.calendar.JCalendar clndassignmentdate;
    private javax.swing.JComboBox<String> cmbvendor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbassignmentdate;
    private javax.swing.JList<String> lstavailable;
    // End of variables declaration//GEN-END:variables
}
