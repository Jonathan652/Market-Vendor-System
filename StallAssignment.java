/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bse_oop2_2025;
import java.sql.*;
import javax.swing.JOptionPane;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

/**
 *
 * @author jonah
 */
public class StallAssignment extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(StallAssignment.class.getName());

    /**
     * Creates new form StallAssignment
     */
    public StallAssignment() {
        initComponents();
        loadVendors();
    loadAvailableStalls();

        
    }
    public void loadVendors() {
    try {
        Connection conn = getConnection();
        String sql = "SELECT vendor_id, CONCAT(first_name, ' ', last_name) AS vendor_name FROM vendors WHERE status = 'Active'";
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sql);
        
        // Clear existing items (replace with your actual combo box name)
        jComboBox1.removeAllItems(); // Replace with your vendor combo box name
        jComboBox1.addItem("Select Vendor");
        
        while (rs.next()) {
            String item = rs.getInt("vendor_id") + " - " + rs.getString("vendor_name");
            jComboBox1.addItem(item);
        }
        
        conn.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error loading vendors: " + e.getMessage());
    }
}
    public void loadAvailableStalls() {
    try {
        Connection conn = getConnection();
        String sql = "SELECT stall_id, stall_number, section, monthly_rent FROM stalls WHERE status = 'Available' ORDER BY stall_number";
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sql);
        
        // Build list of available stalls for your list component
        java.util.Vector<String> stallList = new java.util.Vector<>();
        
        while (rs.next()) {
            String stallInfo = rs.getString("stall_number") + " - " + 
                              rs.getString("section") + " (UGX " + 
                              rs.getDouble("monthly_rent") + ")";
            stallList.add(stallInfo);
        }
        
        // Set data to your list component (replace with your actual list name)
        jList1.setListData(stallList); // Replace with your stalls list name
        
        conn.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error loading available stalls: " + e.getMessage());
    }
}
    public String getSelectedDate() {
    // Get date from your date picker component
    // This depends on what date component you're using
    // For now, I'll use current date as example
    LocalDate selectedDate = LocalDate.now(); // Replace with actual date from your picker
    
    // If using JDateChooser or similar, it might be:
    // Date date = jDateChooser1.getDate();
    // LocalDate selectedDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    
    return selectedDate.toString(); // Returns format: 2025-09-22
}
    public Connection getConnection() {
    try {
        String url = "jdbc:mysql://localhost:3306/market_vendor_db";
        String username = "root";
        String password = "Jonah@1170";
        
        Connection conn = DriverManager.getConnection(url, username, password);
        return conn;
    } catch (Exception e) {
        System.out.println("Database connection error: " + e.getMessage());
        return null;
    }
}
    public void setTodayAsDefault() {
    // If you want to set today's date as default
    LocalDate today = LocalDate.now();
    
    // Set date to your date picker component
    // This depends on your date component type
    // For example, if using JDateChooser:
    // jDateChooser1.setDate(java.sql.Date.valueOf(today));
    
    System.out.println("Default date set to: " + today.toString());
}
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        lbassignmentdate = new javax.swing.JLabel();
        btnassign = new javax.swing.JButton();
        btncancel = new javax.swing.JButton();
        clndassignmentdate = new com.toedter.calendar.JCalendar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Vendor");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Available");

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        lbassignmentdate.setText("Assignment Date");

        btnassign.setText("Assign");
        btnassign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnassignActionPerformed(evt);
            }
        });

        btncancel.setText("Cancel");
        btncancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(lbassignmentdate))
                .addGap(116, 116, 116)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(clndassignmentdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(225, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(btnassign)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btncancel)
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                        .addComponent(lbassignmentdate)
                        .addGap(100, 100, 100))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clndassignmentdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnassign)
                    .addComponent(btncancel))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnassignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnassignActionPerformed
        // TODO add your handling code here:
    // Get selected vendor
    if (jComboBox1.getSelectedIndex() == 0) { // Replace with your combo box name
        JOptionPane.showMessageDialog(this, "Please select a vendor!");
        return;
    }
    
    // Get selected stall
    String selectedStall = jList1.getSelectedValue(); // Replace with your list name
    if (selectedStall == null) {
        JOptionPane.showMessageDialog(this, "Please select an available stall!");
        return;
    }
    
    // Extract vendor ID
    String vendorInfo = jComboBox1.getSelectedItem().toString();
    int vendorId = Integer.parseInt(vendorInfo.split(" - ")[0]);
    
    // Extract stall number
    String stallNumber = selectedStall.split(" - ")[0];
    
    // Get assignment date
    String assignmentDate = getSelectedDate();
    
    try {
        Connection conn = getConnection();
        
        // Get stall ID
        String getStallIdSql = "SELECT stall_id, monthly_rent FROM stalls WHERE stall_number = ?";
        PreparedStatement getStallPst = conn.prepareStatement(getStallIdSql);
        getStallPst.setString(1, stallNumber);
        ResultSet stallRs = getStallPst.executeQuery();
        
        if (stallRs.next()) {
            int stallId = stallRs.getInt("stall_id");
            double monthlyRent = stallRs.getDouble("monthly_rent");
            
            // Check if vendor already has an active assignment
            String checkSql = "SELECT * FROM stall_assignments WHERE vendor_id = ? AND status = 'Active'";
            PreparedStatement checkPst = conn.prepareStatement(checkSql);
            checkPst.setInt(1, vendorId);
            ResultSet checkRs = checkPst.executeQuery();
            
            if (checkRs.next()) {
                int confirm = JOptionPane.showConfirmDialog(this, 
                    "This vendor already has an active stall assignment. Continue anyway?", 
                    "Confirm Assignment", 
                    JOptionPane.YES_NO_OPTION);
                
                if (confirm != JOptionPane.YES_OPTION) {
                    return;
                }
            }
            
            // Insert stall assignment
            String assignSql = "INSERT INTO stall_assignments (vendor_id, stall_id, assignment_date, monthly_rent, status) VALUES (?, ?, ?, ?, 'Active')";
            PreparedStatement assignPst = conn.prepareStatement(assignSql);
            assignPst.setInt(1, vendorId);
            assignPst.setInt(2, stallId);
            assignPst.setDate(3, java.sql.Date.valueOf(assignmentDate));
            assignPst.setDouble(4, monthlyRent);
            
            int result = assignPst.executeUpdate();
            
            if (result > 0) {
                // Update stall status to occupied
                String updateStallSql = "UPDATE stalls SET status = 'Occupied' WHERE stall_id = ?";
                PreparedStatement updatePst = conn.prepareStatement(updateStallSql);
                updatePst.setInt(1, stallId);
                updatePst.executeUpdate();
                
                JOptionPane.showMessageDialog(this, 
                    "Stall " + stallNumber + " assigned successfully to vendor!\n" +
                    "Monthly Rent: UGX " + monthlyRent);
                
                // Refresh the available stalls list
                loadAvailableStalls();
                
                // Reset selections
                jComboBox1.setSelectedIndex(0);
                jList1.clearSelection();
                
            } else {
                JOptionPane.showMessageDialog(this, "Failed to assign stall. Please try again.");
            }
        }
        
        conn.close();
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error assigning stall: " + ex.getMessage());
    }

    }//GEN-LAST:event_btnassignActionPerformed

    private void btncancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancelActionPerformed
        // TODO add your handling code here:
    this.setVisible(false);
    new StallManagement().setVisible(true); // Go back to stall management

    }//GEN-LAST:event_btncancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new StallAssignment().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnassign;
    private javax.swing.JButton btncancel;
    private com.toedter.calendar.JCalendar clndassignmentdate;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbassignmentdate;
    // End of variables declaration//GEN-END:variables
}
