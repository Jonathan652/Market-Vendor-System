/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bse_oop2_2025;

import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;

/**
 *
 * @author jonah
 */
public class Paymentform extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Paymentform.class.getName());

    /**
     * Creates new form
     */
    public Paymentform() {
        initComponents();
        setupPaymentMethods();
        loadOutstandingFeesTable();
        loadPendingFees();

    }

    private void setupPaymentMethods() {
        cmboxpaymentmethod.removeAllItems(); // Replace with your payment method combo box name
        cmboxpaymentmethod.addItem("Cash");
        cmboxpaymentmethod.addItem("Mobile Money");
        cmboxpaymentmethod.addItem("Bank Transfer");
        cmboxpaymentmethod.addItem("Cheque");
    }
    // Load outstanding fees into table
    // Load outstanding fees into table

    public void loadOutstandingFeesTable() {
        try {
            Connection conn = DbConnection.getConnection();
            String sql = "SELECT f.fee_id, CONCAT(v.first_name, ' ', v.last_name) AS vendor_name, "
                    + "f.amount, f.fee_date, f.payment_status FROM daily_fees f "
                    + "JOIN vendors v ON f.vendor_id = v.vendor_id "
                    + "WHERE f.payment_status IN ('Pending', 'Partial') ORDER BY f.fee_date DESC";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);

            DefaultTableModel model = (DefaultTableModel) tbloutstanding.getModel();
            model.setRowCount(0);
            model.setColumnIdentifiers(new Object[]{"Fee ID", "Vendor Name", "Amount", "Date", "Status"});

            while (rs.next()) {
                Object[] row = {
                    rs.getInt("fee_id"),
                    rs.getString("vendor_name"),
                    "UGX " + rs.getDouble("amount"),
                    rs.getDate("fee_date"),
                    rs.getString("payment_status")
                };
                model.addRow(row);
            }

            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading outstanding fees: " + e.getMessage());
        }
    }



    public void loadPendingFees() {
        try {
            Connection conn = DbConnection.getConnection();
            String sql = "SELECT f.fee_id, CONCAT(v.first_name, ' ', v.last_name) AS vendor_name, "
                    + "f.amount, f.fee_date FROM daily_fees f "
                    + "JOIN vendors v ON f.vendor_id = v.vendor_id "
                    + "WHERE f.payment_status = 'Pending' ORDER BY f.fee_date DESC";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);

            cmbfeepay.removeAllItems(); // Replace with your "Select fee to pay" combo box
            cmbfeepay.addItem("Select fee to pay");

            while (rs.next()) {
                String feeInfo = "Fee #" + rs.getInt("fee_id") + " - "
                        + rs.getString("vendor_name") + " - UGX "
                        + rs.getDouble("amount") + " (" + rs.getDate("fee_date") + ")";
                cmbfeepay.addItem(feeInfo);
            }

            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading pending fees: " + e.getMessage());
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lboutstanding = new javax.swing.JLabel();
        lbselectfee = new javax.swing.JLabel();
        lbpayment = new javax.swing.JLabel();
        txtpayment = new javax.swing.JTextField();
        lbpaymentmethod = new javax.swing.JLabel();
        cmboxpaymentmethod = new javax.swing.JComboBox<>();
        btnprocesspayment = new javax.swing.JButton();
        btnprintreceipt = new javax.swing.JButton();
        btnbacktoMain = new javax.swing.JButton();
        cmbfeepay = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbloutstanding = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lboutstanding.setText("Outstanding ");

        lbselectfee.setText("Select fee to pay");

        lbpayment.setText("Payment");

        txtpayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpaymentActionPerformed(evt);
            }
        });

        lbpaymentmethod.setText("Payment Method");

        cmboxpaymentmethod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmboxpaymentmethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxpaymentmethodActionPerformed(evt);
            }
        });

        btnprocesspayment.setText("Process Payment");
        btnprocesspayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprocesspaymentActionPerformed(evt);
            }
        });

        btnprintreceipt.setText("Print receipt");
        btnprintreceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprintreceiptActionPerformed(evt);
            }
        });

        btnbacktoMain.setText("Back to Main");
        btnbacktoMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbacktoMainActionPerformed(evt);
            }
        });

        cmbfeepay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbfeepay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbfeepayActionPerformed(evt);
            }
        });

        tbloutstanding.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbloutstanding);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(lboutstanding)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(152, 152, 152))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnbacktoMain)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbselectfee)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(lbpayment))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnprocesspayment)
                                    .addComponent(lbpaymentmethod))))
                        .addGap(44, 44, 44)
                        .addComponent(btnprintreceipt)
                        .addGap(416, 416, 416)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtpayment, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbfeepay, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(cmboxpaymentmethod, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(323, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(187, 187, 187)
                        .addComponent(lboutstanding))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbfeepay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtpayment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmboxpaymentmethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(btnbacktoMain))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbselectfee)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbpayment, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbpaymentmethod)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnprocesspayment)
                            .addComponent(btnprintreceipt))))
                .addGap(63, 63, 63))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtpaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpaymentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtpaymentActionPerformed

    private void cmboxpaymentmethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmboxpaymentmethodActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmboxpaymentmethodActionPerformed

    private void cmbfeepayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbfeepayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbfeepayActionPerformed

    private void btnprocesspaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprocesspaymentActionPerformed
        // TODO add your handling code here:
        if (cmbfeepay.getSelectedIndex() == 0) { // Fee selection
            JOptionPane.showMessageDialog(this, "Please select a fee to pay!");
            return;
        }

        String paymentAmountText = txtpayment.getText().trim(); // Replace with your field name
        if (paymentAmountText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter payment amount!");
            return;
        }

        if (cmboxpaymentmethod.getSelectedIndex() == -1) { // Payment method
            JOptionPane.showMessageDialog(this, "Please select payment method!");
            return;
        }

        try {
            // Extract fee ID from selected item
            String selectedFee = cmbfeepay.getSelectedItem().toString();
            String feeIdStr = selectedFee.split(" - ")[0].replace("Fee #", "");
            int feeId = Integer.parseInt(feeIdStr);

            double paymentAmount = Double.parseDouble(paymentAmountText);
            String paymentMethod = cmboxpaymentmethod.getSelectedItem().toString();

            try ( // Get fee details to validate amount
                    Connection conn = DbConnection.getConnection()) {
                String getFeeSQL = "SELECT amount, vendor_id FROM daily_fees WHERE fee_id = ?";
                PreparedStatement getFeePst = conn.prepareStatement(getFeeSQL);
                getFeePst.setInt(1, feeId);
                ResultSet feeRs = getFeePst.executeQuery();
                
                if (feeRs.next()) {
                    double feeAmount = feeRs.getDouble("amount");
                    
                    if (paymentAmount > feeAmount) {
                        JOptionPane.showMessageDialog(this,
                                """
                                Payment amount cannot be greater than fee amount!
                                Fee Amount: UGX """ + feeAmount);
                        return;
                    }
                    
                    // Insert payment record
                    String insertPaymentSQL = "INSERT INTO payments (fee_id, amount_paid, payment_date, payment_method) VALUES (?, ?, ?, ?)";
                    PreparedStatement paymentPst = conn.prepareStatement(insertPaymentSQL);
                    paymentPst.setInt(1, feeId);
                    paymentPst.setDouble(2, paymentAmount);
                    paymentPst.setDate(3, java.sql.Date.valueOf(LocalDate.now()));
                    paymentPst.setString(4, paymentMethod);
                    
                    int paymentResult = paymentPst.executeUpdate();
                    
                    if (paymentResult > 0) {
                        // Update fee status
                        String updateFeeSQL;
                        if (paymentAmount == feeAmount) {
                            updateFeeSQL = "UPDATE daily_fees SET payment_status = 'Paid' WHERE fee_id = ?";
                        } else {
                            updateFeeSQL = "UPDATE daily_fees SET payment_status = 'Partial' WHERE fee_id = ?";
                        }
                        
                        PreparedStatement updatePst = conn.prepareStatement(updateFeeSQL);
                        updatePst.setInt(1, feeId);
                        updatePst.executeUpdate();
                        
                        JOptionPane.showMessageDialog(this,
                                "Payment processed successfully!\n"
                                        + "Amount: UGX " + paymentAmount + "\n"
                                                + "Method: " + paymentMethod + "\n"
                                                        + "Receipt can be printed.");
                        
                        // Reset form
                        cmbfeepay.setSelectedIndex(0);
                        txtpayment.setText("");
                        cmboxpaymentmethod.setSelectedIndex(0);
                        
                        // Refresh data
                        loadOutstandingFeesTable();
                        loadPendingFees();
                        
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to process payment. Please try again.");
                    }
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid payment amount!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error processing payment: " + e.getMessage());
        }

    }//GEN-LAST:event_btnprocesspaymentActionPerformed

    private void btnprintreceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprintreceiptActionPerformed
        // TODO add your handling code here:
        if (cmbfeepay.getSelectedIndex() == 0) {
        JOptionPane.showMessageDialog(this, "Please select a fee first!");
        return;
    }
    
    try {
        String selectedFee = cmbfeepay.getSelectedItem().toString();
        String feeIdStr = selectedFee.split(" - ")[0].replace("Fee #", "");
        int feeId = Integer.parseInt(feeIdStr);
        
            try (Connection conn = DbConnection.getConnection()) {
                String sql = "SELECT p.payment_id, p.amount_paid, p.payment_date, p.payment_method, " +
                        "CONCAT(v.first_name, ' ', v.last_name) AS vendor_name, f.amount AS fee_amount " +
                        "FROM payments p " +
                        "JOIN daily_fees f ON p.fee_id = f.fee_id " +
                        "JOIN vendors v ON f.vendor_id = v.vendor_id " +
                        "WHERE p.fee_id = ? ORDER BY p.payment_id DESC LIMIT 1";
                PreparedStatement pst = conn.prepareStatement(sql);
                pst.setInt(1, feeId);
                ResultSet rs = pst.executeQuery();
                
                if (rs.next()) {
                    String receipt = """
                                                 ========== PAYMENT RECEIPT ==========
                                                 Date: """ + rs.getDate("payment_date") + "\n" +
                            "Receipt No: " + rs.getInt("payment_id") + "\n" +
                            "--------------------------------------\n" +
                            "Vendor: " + rs.getString("vendor_name") + "\n" +
                            "Fee Amount: UGX " + rs.getDouble("fee_amount") + "\n" +
                            "Amount Paid: UGX " + rs.getDouble("amount_paid") + "\n" +
                            "Payment Method: " + rs.getString("payment_method") + "\n" +
                            "--------------------------------------\n" +
                            "Thank you for your payment!\n" +
                            "Market Vendor Management System\n" +
                            "=====================================";
                    
                    JOptionPane.showMessageDialog(this, receipt, "Payment Receipt", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "No payment found for this fee!");
                }   }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error generating receipt: " + e.getMessage());
    }

    }//GEN-LAST:event_btnprintreceiptActionPerformed

    private void btnbacktoMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbacktoMainActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new MainDashBoard().setVisible(true);
    }//GEN-LAST:event_btnbacktoMainActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Paymentform().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnbacktoMain;
    private javax.swing.JButton btnprintreceipt;
    private javax.swing.JButton btnprocesspayment;
    private javax.swing.JComboBox<String> cmbfeepay;
    private javax.swing.JComboBox<String> cmboxpaymentmethod;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lboutstanding;
    private javax.swing.JLabel lbpayment;
    private javax.swing.JLabel lbpaymentmethod;
    private javax.swing.JLabel lbselectfee;
    private javax.swing.JTable tbloutstanding;
    private javax.swing.JTextField txtpayment;
    // End of variables declaration//GEN-END:variables
}
